/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Common String Algorithm
 #	author : miyako
 #	2018/10/26
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#include "dice.h"
#include "lcs.h"
#include "jaro_winkler.h"
#include "levenshtein.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Dice's coefficient

		case 1 :
			Coefficient(pResult, pParams);
			break;

// --- Levenshtein distance

		case 2 :
			Levenshtein(pResult, pParams);
			break;

// --- LCS

		case 3 :
			Longest_common_subsequence(pResult, pParams);
			break;

		case 4 :
			Longest_common_substring(pResult, pParams);
			break;

// --- Jaro Winkler

		case 5 :
			Jaro_winkler(pResult, pParams);
			break;

		case 6 :
			Jaro(pResult, pParams);
			break;

	}
}

// ------------------------------ Dice's coefficient ------------------------------


void Coefficient(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_TEXT Param1;
    C_TEXT Param2;
    C_REAL returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    returnValue.setDoubleValue(dice_coefficient(Param1, Param2));
    returnValue.setReturn(pResult);
}

// ----------------------------- Levenshtein distance -----------------------------

void Levenshtein(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_TEXT Param1;
    C_TEXT Param2;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    returnValue.setIntValue(levenshtein(Param1, Param2));
    returnValue.setReturn(pResult);
}

// -------------------------------------- LCS -------------------------------------

void Longest_common_subsequence(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_TEXT Param1;
    C_TEXT Param2;
    C_TEXT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    LongestCommonSubsequence(Param1, Param2, returnValue);
    returnValue.setReturn(pResult);
}

void Longest_common_substring(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_TEXT Param1;
    C_TEXT Param2;
    C_TEXT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    LongestCommonSubstring(Param1, Param2, returnValue);
    returnValue.setReturn(pResult);
}

// --------------------------------- Jaro-Winkler ---------------------------------

void Jaro_winkler(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_TEXT Param1;
    C_TEXT Param2;
    C_REAL returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    returnValue.setDoubleValue(jaro_winkler(Param1, Param2));
    returnValue.setReturn(pResult);
}

void Jaro(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_TEXT Param1;
    C_TEXT Param2;
    C_REAL returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    returnValue.setDoubleValue(jaro(Param1, Param2));
    returnValue.setReturn(pResult);
}
